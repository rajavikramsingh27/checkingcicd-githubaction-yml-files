
name: Flutter_iOS

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build_ios:
    runs-on: macos-latest
    env:
      SHEME: Runner
      BUILD_CONFIGURATION: Release

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          p12-password: ${{ secrets.APPSTORE_CERT_PASSWORD }}

      - name: Install the provisioning profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.APPSTORE_MOBILEPROVISION_BASE64 }}
          TEAM_ID: ZN7UK8WX2G

        run: |
          # create variables
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          # import provisioning profile from secrets
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Install and set Flutter version
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
          architecture: x64
      - name: Restore packages
        run: flutter pub get

      - name: Build Flutter
        run: |
          cd ios
          pod install
          pod update
          flutter build ios --release --no-codesign

      - name: Build resolve Swift dependencies
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme ${{ env.SHEME }} -configuration ${{ env.BUILD_CONFIGURATION }}

      - name: Build xArchive
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace -scheme ${{ env.SHEME }} -configuration ${{ env.BUILD_CONFIGURATION }} DEVELOPMENT_TEAM=${{ env.TEAM_ID }} -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app.xcarchive PROVISIONING_PROFILE=7a9d126a-5725-40a-a18d-506d81f66366 clean archive CODE_SIGN_IDENTITY="Apple Distribution: Miggle Ltd"
      - name: Export ipa
        run: xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ExportOptions.plist

      - name: Publish iOS Artefacts
        uses: actions/upload-artifact@v1
        with:
          name: release-ios
          path: build-output/ios
  release:
    name: Release ipa to Firebase
    needs: [ build_ios ]
    runs-on: ubuntu-latest
    steps:
      # Retrieve ipa file from GitHub artifacts
      - uses: actions/checkout@v2
      - name: Get release-ipa from artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-ios

      # Upload ipa file to Fiebase
      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID_IOS}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          group: testers
          file: checkingcicd.ipa



#name: Flutter CI iOS Working
#on:
#  push:
#    branches:
#      - master
#
#jobs:
#  # Build job
#  build:
#    runs-on: macos-latest
#    steps:
#      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      # Install the Apple certificate and provisioning profile
#      - name: Install the Apple certificate and provisioning profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
##          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPSTORE_MOBILEPROVISION_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.APPSTORE_KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
#
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#      # Install flutter
#      - name: Flutter get
#        uses: subosito/flutter-action@v1
#        with:
#          channel: 'stable'
#          architecture: x64
#      # Install your project's dependencies
#      - run: flutter pub get
#      # Build and sign the ipa using a single flutter command
#      - name: Building IPA
#        run: |
#          cd ios
#          pod install
#          pod update
#          flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
#
#      #        run: pod install
##        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
#
#      # Collect the file and upload as artifact
#      - name: collect ipa artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: release-ipa
#          # Path to the release files
#          path: build/ios/ipa/*.ipa
#
#      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
#      - name: Clean up keychain and provisioning profile
#        if: ${{ always() }}
#        run: |
#          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
#          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
#  # Release job, upload the ipa to Firebase App Distribution
#  release:
#    name: Release ipa to Firebase
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#      # Retrieve ipa file from GitHub artifacts
#      - uses: actions/checkout@v2
#      - name: Get release-ipa from artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: release-ipa
#
#      # Upload ipa file to Fiebase
#      - name: Upload artifact to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{secrets.FIREBASE_APP_ID_IOS}}
#          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
#          group: testers
#          file: herosapp.ipa
