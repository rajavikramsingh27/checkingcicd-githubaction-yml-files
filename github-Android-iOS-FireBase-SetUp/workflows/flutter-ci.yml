
name: How to write for Android & iOS Flutter+GitHub+Flutter+Android and iOS

on:
  push:
    branches:
      - master

jobs:
  build_iOS:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64
      - run: flutter pub get
      - run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload
#      - name: Upload iPA
#        uses: actions/upload-artifact@master
#        with:
#          name: ios-build
#          path: build/ios/iphoneos
#          path: Users/runner/work/herosAppVikram/herosAppVikram/build/ios/iphoneos/Runner.app

          #      - uses: actions/upload-artifact@v3
          #       - uses: ncipollo/release-action@v1
          #         with:
          #           #path: build/app/outputs/apk/release/app-release.apk
          #           path: build/ios/iphoneos
          #           artifacts: "build/ios/iphoneos/app.ipa"
          #           tag: v1.0.${{ github.run_number }}
          #           token: ${{ secrets.TOKEN }}

  iOS_FireBase:
    #     name: Upload iOS to Firebase
    needs: [build_iOS]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      #     - name: Download Artifact
      #       uses: actions/download-artifact@master
      #       with:
      #         name: ios-build
      - name: Upload iPA Artifact to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID_IOS}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          group: testers
          file: build/ios/iphoneos
#          file: Users/runner/work/herosAppVikram/herosAppVikram/build/ios/iphoneos/Runner.ipa
#          file: Runner.ipa



  # name: Flutter CI Android Working
  build_APK_FireBase:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable' # 'dev', 'alpha', default to: 'stable'
          # flutter-version: '1.12.x' # you can also specify exact version of flutter

      - run: flutter pub get
      - run: flutter build apk --debug

      #      - uses: actions/upload-artifact@v1
#      - uses: ncipollo/release-action@v1
#        with:
#          artifacts: "build/app/outputs/apk/debug/app-debug.apk"
#          tag: v1.0.${{ github.run_number }}
#          token: ${{ secrets.TOKEN }}

      - name: Upload APK Artifact to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID_ANDROID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          group: testers
          file: build/app/outputs/apk/debug/app-debug.apk
#          releaseNotes: v1.0.0
#          releaseNotesFile: v1.0.0



#name: Flutter CI iOS Working
#on:
#  push:
#    branches:
#      - master
#
#jobs:
#  # Build job
#  build:
#    runs-on: macos-latest
#    steps:
#      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      # Install the Apple certificate and provisioning profile
#      - name: Install the Apple certificate and provisioning profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
#          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPSTORE_MOBILEPROVISION_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.APPSTORE_KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#          # import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          # import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#      # Install flutter
#      - name: Flutter get
#        uses: subosito/flutter-action@v1
#        with:
#          channel: 'stable'
#
#      # Install your project's dependencies
#      - run: flutter pub get
#
#      # Build and sign the ipa using a single flutter command
#      - name: Building IPA
#        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
#
#      # Collect the file and upload as artifact
#      - name: collect ipa artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: release-ipa
#          # Path to the release files
#          path: build/ios/ipa/*.ipa
#
#      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
#      - name: Clean up keychain and provisioning profile
#        if: ${{ always() }}
#        run: |
#          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
#          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
#  # Release job, upload the ipa to Firebase App Distribution
#  release:
#    name: Release ipa to Firebase
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#
#      # Retrieve ipa file from GitHub artifacts
#      - uses: actions/checkout@v2
#      - name: Get release-ipa from artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: release-ipa
#
#      # Upload ipa file to Fiebase
#      - name: Upload artifact to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{secrets.FIREBASE_IOS_APP_ID}}
#          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
#          group: testers
#          file: herosapp.ipa